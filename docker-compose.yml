version: '3.8'

services:
  # FastAPI 애플리케이션 서버
  web:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/pdf_to_epub
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=true
      - SECURITY_API_KEY=your-secret-api-key-here
    depends_on:
      - db
      - redis
    volumes:
      - ./app:/app
    command: bash /app/start_app.sh

  # PostgreSQL 데이터베이스
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: pdf_to_epub
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d pdf_to_epub"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 메시지 브로커 및 캐시
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/pdf_to_epub
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=false
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/app
    depends_on:
      - db
      - redis
    volumes:
      - ./app:/app
    command: bash -c "cd /app && PYTHONPATH=/app celery -A app.celery_config:celery_app worker --loglevel=info --concurrency=4"
    healthcheck:
      test: ["CMD", "celery", "-A", "app.celery_config:celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat (스케줄러)
  celery_beat:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/pdf_to_epub
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=false
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/app
    depends_on:
      - db
      - redis
    volumes:
      - ./app:/app
    command: bash -c "cd /app && PYTHONPATH=/app celery -A app.celery_config:celery_app beat --loglevel=info"
    healthcheck:
      test: ["CMD", "pgrep", "-f", "celery beat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Flower (모니터링 대시보드)
  celery_flower:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - FLOWER_BASIC_AUTH=admin:admin123
      - PYTHONPATH=/app
    depends_on:
      - redis
    ports:
      - "5555:5555"
    volumes:
      - ./app:/app
    command: bash -c "export PYTHONPATH=/app && cd /app && celery -A app.celery_config:celery_app flower --port=5555"

  # Nginx 리버스 프록시 (선택 사항)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - web
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

# 네트워크 설정
networks:
  default:
    name: pdf_to_epub_network